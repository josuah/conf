#!/bin/sh -eu

get_os() {
	kernel=$(uname)

	case $kernel in
	(Linux)
		check_package_manager	apt		DebianLinux
		check_package_manager	apk		AlpineLinux
		check_package_manager	pacman		ArchLinux
		check_package_manager	yum		RedHatLinux
		check_package_manager	zypper		SuseLinux
		check_package_manager	emerge		GentooLinux
		check_package_manager	xbps-install	VoidLinux
		;;
	(*)
		exec echo "$kernel"
		;;
	esac
}

trap_add() {
	trap="${trap:-:}; $1"
	trap "$trap" INT TERM EXIT HUP
}

trap_pop() {
	trap="${trap%; *}"
	trap "$trap" INT TERM EXIT HUP
}

cmd() {
	local type="$1" cmd="$2" name="$3"
	shift 3

	echo ">>> $cmd $type/$name $*" >&2

	for x in "$@"; do
		if [ "${x%%=*}" = "os_$os" ]; then
			export "var_this_os=${x#*=}"
		fi
		export "var_$x"
	done

	"cmd_${type}_${cmd}" "$name"
}

apply() {
	local command="$1" node="$2" vars exit
	shift 2

	local vars
	while read node vars; do
		local type=${node%%/*}
		local name=${node#*/}

		if type "cmd_${type}_${command}" >/dev/null; then
			(cmd "$type" "$command" "$name" $vars) || exit=1
		fi
	done

	return "${exit:-0}"
}

list() {
	local level="$1" node="$2"
	shift 2

	printf "%-$((level * 2))s%s%s\n" "" "$node" "${*:+ $*}"

	if [ ! -f "$etc/node/$node" ]; then
		return
	fi
	while read node vars; do
		list $((level + 1)) "$node" "$@" $vars
	done <$etc/node/$node
}

export PATH=/bin:/sbin:/usr/bin:/usr/sbin
for x in adm /usr/*/bin /usr/*/sbin; do
	export PATH="$PATH:$x/"
done

export os="$(get_os)"
export etc="${ADM_CONFIG:-/etc/adm/current}"
export usr="${ADM_PREFIX:-/usr/adm}"
export tmp="$(mktemp -d)"
export cache="${ADM_CACHE:-/var/cache/adm}"
export lib="${0%/*/*}/lib/adm"

trap_add 'rm -rf "$tmp"'

command="${1:-help}" node="${2:-host/$(hostname -s)}"
[ $# = 1 ] && shift 1
[ $# = 2 ] && shift 2

case $command in
(install | update | enable | disable | start | stop | restart | reload | status | monitor)

	. "$lib/cmd_build.sh"
	. "$lib/cmd_golang.sh"
	. "$lib/cmd_module.sh"
	. "$lib/cmd_monitor.sh"
	. "$lib/cmd_repo.sh"

	if [ -f "$lib/os_$os.sh" ]; then
		. "$lib/os_$os.sh"
	fi

	list 0 "$node" "$@" | apply "$command" "$node"
	;;

(list)
	list 0 "$node" "$@"
	;;

(*)

	echo "usage: ${0##*/} command [node/name] [key=value...]"
	echo "command: list, install, update, enable, disable, start, stop, restart, reload, status, monitor"
	;;

esac
