#!/usr/bin/awk -f


## utilities ##

function die(msg)
{
	print "error: " msg >"/dev/stderr"
	exit(1)
}

function color(n)
{
	return (ENVIRON["NCOLOR"]) ? "" : sprintf("\033[%dm", n)
}

function assert(expr, fn)
{
	if (!expr)
		die(fn ": assert failed")
}

function array_join(array, sep,
	i, str)
{
	for (i = 1; i in array; i++)
		str = (i == 1 ? array[i] : str sep array[i])
	return str
}

function array_swap(array, a, b,
	tmp)
{
	tmp = array[a]
	array[a] = array[b]
	array[b] = tmp
}

function array_keys(array, keys,
	n, x)
{
	split("", keys)
	for (x in array)
		keys[++n] = x
	array_sort(keys, 1, n)
	return n
}

function array_sort(array, beg, end)
{
	if (beg >= end)					# end recursion
		return

	a = beg + 1					# 1st is the pivot
	b = end
	while (a < b) {
		while (a < b && array[a] <= array[beg])	# beg: skip lesser
			a++
		while (a < b && array[b] > array[beg])	# end: skip greater
			b--
		array_swap(array, a, b)			# found 2 misplaced
	}

	if (array[beg] > array[a])			# put the pivot back
		array_swap(array, beg, a)

	array_sort(array, beg, a - 1)			# sort top half
	array_sort(array, a, end)			# sort bottom half
}

function array_prefix_keys(array_in, array_out, prefix,
	x)
{
	for (x in array_in) {
		array_out[prefix x] = array_in[x]
		delete array_out[x]
	}
}

function array_shift(array,
	first, i)
{
	assert(1 in array)
	first = array[1]
	for (i = 1; i + 1 in array; i++)
		array[i] = array[i + 1]
	delete array[i]
	return first
}

function array_delete(array, prefix,
	x)
{
	for (x in array)
		if (substr(array[x], 1, length(prefix)) == prefix)
			delete array[x]
}

## tools ##

function ip6_hex(ip6,
	hex, i, arr)
{
	sub("::", substr("::::::::", split(ip6, arr, ":") - 1), ip6)
	split(ip6, arr, ":")
	for (i = 1; i <= 8; i++)
		hex = hex substr("0000" arr[i], length(arr[i]) + 1)
	return hex
}


## database ##

function db_split(str, argv)
{
	# escape special characters
	gsub(/\t/, " ", str)
	gsub(/\\\\/, "\\s", str)
	gsub(/\\"/, "\\q", str)

        # match key or key=value or key="value value"
        gsub(/[^= \t]+(="[^"]*"|=[^" \t]*)?/, "\t&\t", str)

	# cleanup
        gsub(/[ \t]*\t[ \t]*/, "\t", str)
	sub("^[ \t]*", "", str)
	sub("[ \t]*$", "", str)

	# split ito argv
	split(str, argv, "\t")

	# restore escaped inline characters
	for (x in argv) {
		gsub(/"/, "", argv[x])
		gsub(/\\q/, "\"", argv[x])
		gsub(/\\s/, "\\", argv[x])
	}
}

function db_keyval(argv, row, keys,
	i, n, key, eq, val)
{
	for (i = 1; i in argv; i++) {
		eq = index(argv[i], "=")
		if (eq == 0) {
			keys[++n] = argv[i]
		} else {
			key = substr(argv[i], 1, eq - 1)
			val = substr(argv[i], eq + 1)
			row[key] = val
		}
	}
}

function db_getline(path, row,
	argv, line, n)
{
	do {
		if ((getline line <path) <= 0) {
			close(path)
			return 0
		}
	} while (line ~ /^[ \t]*#/)

	n = row[""]
	split("", row)
	db_split(line, argv)
	db_keyval(argv, row)
	row[""] = n + 1
	return 1
}

function db_match(query, row,
	x)
{
	for (x in query)
		if (!(x in row) || row[x] != query[x])
			return 0
	return 1
}

function db_getmatch(path, query, row)
{
	while (db_getline(path, row))
		if (db_match(query, row))
			return 1
	return 0
}

function db_expand(str, vars,
	x)
{
	for (x in vars)
		gsub("\\[" x "\\]", vars[x], str)
	for (x in ENVIRON)
		gsub("\\[" x "\\]", ENVIRON[x], str)
	return str
}

function db_query(path, keys, query, result,
	row, found, i, n)
{
	split("", result)
	while (db_getmatch(path, query, row)) {
		for (i = 1; i in keys; i++) {
			if (keys[i] in row)
				found = 1
			result[++n] = row[keys[i]]
		}
		if (found)
			return 1
	}
	return 0
}

function db_format_val(val)
{
	gsub("\t", " ", val)
	return index(val, " ") ? "\"" val "\"" : val
}

function db_pprint(row, width,
	i, n, put, len, col, keys, val)
{
	printf("%3d ", row[""])
	col = 4

	n = array_keys(row, keys)

	for (i = 2; i <= n; i++) {
		len = 1 + length(keys[i]) + 1 + length(row[keys[i]])
		if (col + len > width && col > 4) {
			printf "\n    "
			col = 4
		}
		val = db_format_val(row[keys[i]])
		printf " " color(36) "%s=" color(0) "%s", keys[i], val
		col += len
	}

	printf "\n"
}

function db_format_row(row,
	i, keys, sp, out)
{
	if (array_keys(row, keys) == 0)
		return
	for (i = 1; i in keys; i++) {
		if (keys[i] == "")
			continue
		out = out sp keys[i] "=" db_format_val(row[keys[i]])
		sp = " "
	}
	return out
}


## templates ##

function tpl_replace(text, vars,
	head, tail, str, result, value)
{
	tail = text
	while (match(tail, "\\{\\{[^}]+\\}\\}")) {
		str = substr(tail, RSTART + 2, RLENGTH - 4)
		sub("^ *", "", str)
		sub(" *$", "", str)
		str = db_expand(str, vars)

		if (str in ENVIRON) {
			value = ENVIRON[str]
		} else if (str in VAR) {
			value = VAR[str]
		} else if (str in vars) {
			value = vars[str]
		} else {
			if (tpl_query(str, result) == 0)
				die("no result for " str)
			value = result[1]
		}

		head = head substr(tail, 1, RSTART - 1) value
		tail = substr(tail, RSTART + RLENGTH)
	}
	return head tail
}

function tpl_inc_tail(lv,
	n, array)
{
	n = split(lv, array, ".")
	array[n]++
	return array_join(array, ".")
}

function tpl_inc_level(lv,
	n, array)
{
	n = split(lv, array, ".")
	array[n + 1] = 1
	return array_join(array, ".")
}

function tpl_dec_level(lv,
	n, array)
{
	n = split(lv, array, ".")
	delete array[n]
	return array_join(array, ".")
}

function tpl_getmatch(str, row, prefix,
	path, argv, query)
{
	db_split(str, argv)
	path = array_shift(argv)
	db_keyval(argv, query)
	if (db_getmatch(path, query, row) == 0)
		return 0
	return 1
}
 
function tpl_query(str, result,
	path, keys, query, argv, e)
{
	if (sub(":", " ", str) == 0)
		die("unrecognized parameter: " str)
	db_split(str, argv)
	path = array_shift(argv)
	db_keyval(argv, query, keys)
	e = db_query(path, keys, query, result)
	close(path)
	return e
}

function tpl_flush(texts, queries, lv, vars,
	n, x, _, row)
{
	if (!(lv in queries))
		return

	n = split(lv, _, ".")
	while (tpl_getmatch(db_expand(queries[lv], vars), row)) {
		array_prefix_keys(row, vars, n ":")
		for (x = lv; x in queries; x = tpl_inc_tail(x)) {
			printf "%s", tpl_replace(texts[x], vars)
			tpl_flush(texts, queries, tpl_inc_level(x), vars)
		}
	}
	array_delete(vars, n ":")
}

function tpl_addline(texts, lv, line)
{
	if (lv == "") {
		print tpl_replace(line)
	} else {
		texts[lv] = texts[lv] line "\n"
	}
}


## commands ##

function cmd_template(path, argv,
	line, include, lv, queries, texts)
{
	if (1 in argv)
		usage()

	VAR["path"] = path

	while ((getline line <path) > 0) {

		if (sub(/^#+include /, "", line)) {
			include = line
			while ((getline line <include) > 0)
				tpl_addline(texts, lv, line)

		} else if (sub(/^#+for /, "", line)) {
			lv = tpl_inc_level(lv)
			queries[lv] = line

		} else if (line ~ /^#+end/) {
			if (lv == "")
				die("more #end than #for")
			lv = tpl_dec_level(lv)
			lv = tpl_inc_tail(lv)

			if (lv == "") {
				tpl_flush(texts, queries, "1")
				split("", queries)
				split("", texts)
			}

		} else {
			tpl_addline(texts, lv, line)
		}
	}
}

function cmd_get(path, argv,
	keys, query, result, i, n)
{
	if (!(1 in argv))
		usage()

	db_keyval(argv, query, keys)
	while (db_query(path, keys, query, result)) {
		for (i = 1; i in result; i++)
			printf "%s%s", (i == 1 ? "" : "\t"), result[i]
		printf "\n"
	}
}

function cmd_list(path, argv,
	cmd, query, row, width)
{
	cmd = "stty size 2>/dev/null"
	cmd | getline width
	close(cmd)

	sub(".* ", "", width)
	width = (width == "" ? 80 : width + 0)

	printf "\n"
	db_keyval(argv, query)
	while (db_getmatch(path, query, row)) {
		db_pprint(row, width)
		printf "\n"
	}
}

function cmd_add(path, argv,
	row)
{
	if (!(1 in argv))
		usage()

	db_keyval(argv, row)
	print db_format_row(row) >>path
}

function cmd_del(path, argv,
	x, num, array)
{
	if (!(1 in argv) || (2 in argv))
		usage()

	split(argv[1], array, ",")
	for (x in array)
		num[array[x]]++

	"mktemp" | getline tmp
	close("mktemp")

	while (db_getline(path, row)) {
		if (row[""] in num)
			continue
		print db_format_row(row) >>tmp
	}
	return system("mv -f '" tmp "' '" path "'") == 0
}

function cmd_set(path, argv,
	x, array, num, row, tmp)
{
	if (!(2 in argv))
		usage()

	split(array_shift(argv), array, ",")
	for (x in array)
		num[array[x]]++

	"mktemp" | getline tmp
	close(mktemp)

	while (db_getline(path, row)) {
		if (row[""] in num) {
			split("", keys)
			db_keyval(argv, row, keys)
			for (x in keys)
				delete row[keys[x]]
		}
		print db_format_row(row) >>tmp
	}
	return system("mv -f '" tmp "' '" path "'") == 0
}

function cmd_num(path, argv,
	query, row, first)
{
	db_keyval(argv, query)
	for (first = 1; db_getmatch(path, query, row); first = 0)
		printf "%s%s", (first ? "" : ","), row[""]
	printf "\n"
}

function cmd_move(path, argv,
	x, array, num, to, row, tmp, block)
{
	if (!(2 in argv) || (3 in argv))
		usage()

	split(array_shift(argv), array, ",")
	for (x in array)
		num[array[x]] = x

	to = array_shift(argv)

	while (db_getline(path, row))
		if (row[""] in num)
			block = block db_format_row(row)
	if (to < 1 || to > row[""])
		die("destination outside possible values: " to)

	"mktemp" | getline tmp
	close("mktemp")

	delete row[""]
	while (db_getline(path, row)) {
		if (row[""] == to)
			print block >>tmp
		if (!(row[""] in num))
			print db_format_row(row) >>tmp
	}

	system("mv '" tmp "' '" path "'")
}


## main ##

function usage()
{
	print "usage:"						>"/dev/stderr"
	print " adm-db <db> list [<key>=<value>...]"		>"/dev/stderr"
	print " adm-db <db> get <key> [<key>=<value>...]"	>"/dev/stderr"
	print " adm-db <db> set <n> <key>=<value>..."		>"/dev/stderr"
	print " adm-db <db> add <key>=<value>..."		>"/dev/stderr"
	print " adm-db <db> del <n>"				>"/dev/stderr"
	print " adm-db <db> num <key>=<value>..."		>"/dev/stderr"
	print " adm-db <db> move <n> <n>"			>"/dev/stderr"
	print " adm-db <template> template"			>"/dev/stderr"
	exit(1)
}

BEGIN {
	cmd = "date +%s"
	cmd | getline VAR["now"]
	close(cmd)

	cmd = "hostname -s"
	cmd | getline VAR["host"]
	close(cmd)

	if (!(2 in ARGV))
		usage()

	path = array_shift(ARGV)
	cmd = array_shift(ARGV)

	if (cmd == "list") {
		cmd_list(path, ARGV)

	} else if (cmd == "get") {
		cmd_get(path, ARGV)

	} else if (cmd == "set") {
		cmd_set(path, ARGV)

	} else if (cmd == "add") {
		cmd_add(path, ARGV)

	} else if (cmd == "del") {
		cmd_del(path, ARGV)

	} else if (cmd == "num") {
		cmd_num(path, ARGV)

	} else if (cmd == "move") {
		cmd_move(path, ARGV)

	} else if (cmd == "template") {
		cmd_template(path, ARGV)

	} else {
		usage()
	}
}
