#!/usr/bin/awk -f

# Example of #macros and {{ queries }}:
#
#	line printed directly
#
#	#for dir/file
#
#	x = {{ static/variable:key key=value key={1:name} }}
#	lines added to blk_texts["1"]
#
#	##for dir/file key={1:name}
#	y = {{ dir/file key=test }}
#	lines added to blk_texts["1.1"]
#	##end
#
#	z = {{ dir/file:key key=value }}
#	line added to blk_texts["2"]
#
#	##for dir/file key={1:type}
#	t = {{ dir/file key={2:name} }}
#	lines added to blk_texts["2.1"]
#	##end
#
#	lines added to blk_texts["3"]
#	
#	#end

function die(msg)
{
	print "error: " msg >"/dev/stderr"
	exit(1)
}

function join(array, sep,
	i, str)
{
	for (i = 1; i in array; i++)
		str = (i == 1) ? (array[i]) : (str sep array[i])
	return str
}

function delete_array(array, pfx,
	i)
{
	for (i in array)
		if (substr(i, 1, length(pfx)) == pfx)
			delete array[i]
}

function db_split(line, vars, pfx,
	array, i, eq, key, val)
{
	gsub("  +", " ", line)
	sub("^ *", "", line)
	sub(" *$", "", line)

	split(line, array, " ")
	for (i in array) {
		eq = index(array[i], "=")
		if (eq == 0) {
			vars[pfx array[i]] = 1
		} else {
			key = substr(array[i], 1, eq - 1)
			val = substr(array[i], eq + 1)
			vars[pfx key] = val
		}
	}
}

function db_getline(path, pfx, result,
	array, line, n)
{
	if ((getline line <path) <= 0) {
		close(path)
		return 0
	}
	sub("#.*", "", line)
	if (line ~ "^[ \t]*?$")
		return db_getline(path, pfx, result)

	db_split(line, result, pfx)
	return 1
}

function db_match(query, vars, pfx,
	key)
{
	for (key in query)
		if (!(pfx key in vars) || query[key] != vars[pfx key])
			return 0
	return 1
}

function db_getmatch(path, line, pfx, result,
	query)
{
	db_split(line, query, "")
	while (db_getline(path, pfx, result)) {
		if (db_match(query, result, pfx))
			return 1
		delete_array(result)
	}
	return 0
}

function db_expand(str, vars,
	i)
{
	for (i in vars)
		gsub("\\[" i "\\]", vars[i], str)
	return str
}

function db_query(line, pfx, result,
	sp, col, path, ret)
{
	sp = index(line, " ")
	if (sp == 0) {
		sub(":.*", "", line)
		return db_getline(line, pfx, result)
	} else {
		path = substr(line, 1, sp - 1)
		line = substr(line, sp + 1)
		sub(":.*", "", path)
		return db_getmatch(path, line, pfx, result)
	}
}

function db_search(line, pfx,
	result, col, key)
{
	if (!db_query(line, pfx, result))
		die("no entry found for " line)

	sub(" .*", "", line)
	col = index(line, ":")
	if (!col)
		die("missing a :key to " line)

	key = substr(line, col + 1)
	return result[key]
}

function replace_text(text, vars,
	head, tail, line, result, key, value)
{
	tail = text
	while (match(tail, "\\{\\{[^}]+\\}\\}")) {
		line = substr(tail, RSTART + 2, RLENGTH - 4)
		sub("^ *", "", line)
		sub(" *$", "", line)
		line = db_expand(line, vars)

		if (line in DYNAMIC) {
			value = DYNAMIC[key]
		} else if (line in vars) {
			value = vars[line]
		} else {
			value = db_search(line)
			if (!value)
				die("no value found for " line)
		}

		head = head substr(tail, 1, RSTART - 1) value
		tail = substr(tail, RSTART + RLENGTH)
	}
	return head tail
}

function blk_inc_tail(blk,
	n, array)
{
	n = split(blk, array, ".")
	array[n]++
	return join(array, ".")
}

function blk_inc_level(blk,
	n, array)
{
	n = split(blk, array, ".")
	array[n + 1] = 1
	return join(array, ".")
}

function blk_dec_level(blk,
	n, array)
{
	n = split(blk, array, ".")
	delete array[n]
	return join(array, ".")
}

function blk_flush(texts, queries, blk, vars,
	n, array, str)
{
	if (!(blk in texts))
		return

	n = split(blk, array, ".")
	while (db_query(queries[n], n":", vars)) {
		str = blk
		while (str in texts) {
			printf "%s", replace_text(texts[str], vars)
			blk_flush(texts, queries, blk_inc_level(str), vars)
			str = blk_inc_tail(str)
		}
	}
	delete_array(vars, n":")
}

BEGIN {
	cmd = "date +'%Y/%m/%d %H:%M:%S %z'"
	cmd | getline DYNAMIC["now"]
	close(cmd)

	cmd = "hostname -s"
	cmd | getline DYNAMIC["host"]
	close(cmd)
}

{
	DYNAMIC["path"] = FILENAME
}

/^#+for / {
	blk = blk_inc_level(blk)
	blk_queries[split(blk, array, ".")] = $2
	blk_dirty = 1
	next
}

/^#+end/ {
	if (blk == "")
		die("more #end than #for")
	blk = blk_dec_level(blk)
	blk = blk_inc_tail(blk)

	if (blk == "") {
		blk_flush(blk_texts, blk_queries, "1")
		delete_array(queries)
		delete_array(texts)
	}
	next
}

blk != "" {
	blk_texts[blk] = blk_texts[blk] $0 "\n"
}

blk == "" {
	print replace_text($0)
}
