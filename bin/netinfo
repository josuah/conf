#!/usr/bin/awk -f
# utility to convert between various IP formats

function mac_eui64(mac)
{
	mac = tolower(mac)
	gsub("[:-]", "", mac)
	return sprintf("fe80::%s:%s:%s:%s",
	  substr(mac, 1, 1) xor(substr(mac, 2, 1), 2) substr(mac, 3, 2),
	  substr(mac, 5, 2) "ff",
	  "fe" substr(mac, 7, 2),
	  substr(mac, 9, 2) substr(mac, 11, 2))
}

function ip6_hex(ip6,
	ar, out)
{
	sub("::", substr("::::::::", split(ip6, ar, ":") - 1), ip6)
	split(ip6, ar, ":")
	for (i = 1; i <= 8; i++)
		out = out substr("0000" ar[i], length(ar[i]) + 1)
	return out
}

function ip6_rev(ip6,
	out)
{
	ip6 = ip6_hex(ip6)
	for (i = 4 * 8; i > 0; i--)
		out = out substr(ip6, i, 1)"."
	return out"ip6.arpa"
}

function hex_ip6(hex,
	beg, end, x)
{
	beg = substr(hex, 1, 16);	end = substr(hex, 17)
	x += sub("(0000)+$", "", beg);	x += sub("^(0000)+", "", end)
	gsub("....", ":&", beg);	gsub("....", ":&", end)
	gsub(":0*", ":", beg);		gsub(":0*", ":", end)
	return substr(beg, 2) (x ? ":" : "") end
}

function int_ip4(n)
{
	return (int(n/256^3) % 256)"."(int(n/256^2) % 256) \
	  "."(int(n/256^1) % 256)"."(int(n/256^0) % 256)
}

function ip4_int(ip4,
	ar, n)
{
	if (split(ip4, ar, ".") != 4) return
	return ar[1]*256^3 + ar[2]*256^2 + ar[3]*256^1 + ar[4]*256^0
}

function usage()
{
	print "usage: netinfo hex <ip6>" >"/dev/stderr"
	print "       netinfo int <ip4>" >"/dev/stderr"
	print "       netinfo rev <ip6>" >"/dev/stderr"
	print "       netinfo ip4 <int>" >"/dev/stderr"
	print "       netinfo ip6 <hex>" >"/dev/stderr"
	print "       netinfo oui <mac>" >"/dev/stderr"
	print "       netinfo eui64 <mac>" >"/dev/stderr"
	exit(1)
}

BEGIN {
	if (ARGC != 3) usage()
	else if (ARGV[1] == "hex") print ip6_hex(ARGV[2])
	else if (ARGV[1] == "int") print ip4_int(ARGV[2])
	else if (ARGV[1] == "rev") print v==6 ? ip6_rev(ARGV[2]) : ip6_rev(ARGV[2])
	else if (ARGV[1] == "ip4") print int_ip4(ARGV[2])
	else if (ARGV[1] == "ip6") print hex_ip6(ARGV[2])
	else if (ARGV[1] == "oui") print mac_oui(ARGV[2])
	else if (ARGV[2] == "eui64") print mac_eui64(ARGV[2])
	else usage()
}
