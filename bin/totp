#!/usr/bin/awk -f

function rshift_(x, n) {
	return int(x / 2^n)
}

#  byte0       byte1       byte2      byte3       byte4
#  |.....|...  ..|.....|.  ....|....  .|.....|..  ...|.....|
#  b0    b1      b2    b3      b4      b5    b6      b7

function b32encode(bin,
	n, i)
{
	for (i = 0; i < length(bin); n = 0) {
		do n = n * 256 + ASCII[substr(bin, i + 1, 1)]
		while (++i % 5)

		b32 = b32 \
		 B32ENCODE[rshift_(n, 35) % 32 + 1] \
		 B32ENCODE[rshift_(n, 30) % 32 + 1] \
		 B32ENCODE[rshift_(n, 25) % 32 + 1] \
		 B32ENCODE[rshift_(n, 20) % 32 + 1] \
		 B32ENCODE[rshift_(n, 15) % 32 + 1] \
		 B32ENCODE[rshift_(n, 10) % 32 + 1] \
		 B32ENCODE[rshift_(n, 5) % 32 + 1] \
		 B32ENCODE[n % 32 + 1]
	}
	i = length(bin) % 5
	if (i == 1) sub(/......$/, "======", b32)
	if (i == 2) sub(/....$/, "====", b32)
	if (i == 3) sub(/...$/, "===", b32)
	if (i == 4) sub(/.$/, "=", b32)
	return b32
}

#  b0     b1     b2    b3     b4     b5    b6     b7
#  |..... ...|.. ..... .|.... ....|. ..... ..|... .....|
#  byte0     byte1      byte2     byte3      byte4

function b32hex(b32,
	n, x)
{
	for (i = 0; i < length(b32); n = 0) {
		do n = n * 32 + B32DECODE[substr(b32, i + 1, 1)] - 1
		while (++i % 8)

		x = x sprintf("%08x", n)
	}
	return x
}

function hex(x,
	i, n)
{
	for (i = 1; i <= length(x); i++)
		n = n * 16 + index("0123456789abcdef", substr(x, i, 1)) - 1
	return n
}

function totp(k,
	t)
{
	# convert the key from base32 to hex
	print b32hex("MZXG64TE")

	# time/30 encoded as '\x00\x00\x00\x00\x00\x00'
	"exec date +%s" | getline NOW
	t = sprintf("%016x", int(NOW / 30))
	gsub(/../, "\\x&", t)

	# hmac the time with the key
	"printf '"t"' | openssl dgst -sha1 -mac HMAC -macopt hexkey:"k | getline
	k = substr($2, hex(substr($2, 40, 1)) * 2 + 1, 8)

	# extract an integer from the digest
	k = sprintf("%x%s", hex(substr(k, 1, 1)) % 8, substr(k, 2))
	return sprintf("%06d", hex(k) % 1000000)
}

BEGIN {
	for (i = 0; i < 256; i++) ASCII[sprintf("%c", i)] = i
	split("A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 2 3 4 5 6 7", x)
	for (i in x) B32ENCODE[i - 1] = x[i]
	for (i in x) B32DECODE[x[i]] = i - 1

	print totp("666e6f7264")
}
